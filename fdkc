#!/bin/zsh

function error() {
  echo "Error: $1"
  echo "Press any key to continue..."
  read -n 1
}

function fatal() {
  echo "Error: $1"
  exit 1
}

function red() {
  echo -e "\033[1;31m$1\033[0m"
}

function green() {
  echo -e "\033[1;32m$1\033[0m"
}

function run_command() {
  local command=$1
  echo "Running: $command"
  echo "Press enter to run the command"
  read -k 1 answer
  if [ "$answer" = $'\n' ]; then
    eval $command
    echo "Press any key to continue..."
    read -n 1
  fi
}

function check_bins() {
  check_docker
  check_fzf
}

function check_docker() {
  if ! command -v docker &> /dev/null; then
    fatal "docker could not be found"
  fi
}

function check_fzf() {
  if ! command -v fzf &> /dev/null; then
    fatal "fzf could not be found"
  fi

  local fzf_version=$(fzf --version)
  local major_version=$(echo $fzf_version | cut -d'.' -f1)
  local minor_version=$(echo $fzf_version | cut -d'.' -f2)
  if [ $major_version = 0 ] && [ $minor_version -lt 53 ]; then
    fatal "fzf version must be at least 0.53.0"
  fi
}

check_bins

show_all=$1

if [ "$show_all" = "true" ]; then
  show_all_label=$(green "true")
  docker_ps_opts="-a"
  fdkc_args=false
else
  show_all_label=$(red "false")
  docker_ps_opts=""
  fdkc_args=true
fi

current_context=$(docker context show)
fzf_expect="enter,ctrl-e,ctrl-a,ctrl-k,ctrl-o,ctrl-s,ctrl-r,space,ctrl-/,ctrl-l,alt-j,alt-l,alt-x,alt-h,alt-r,alt-i,alt-u"
fzf_header="Current Docker context: $(green $current_context), Show all: $show_all_label
enter/ctrl-e: exec, ctrl-a: toggle all, ctrl-k: kill, ctrl-o: stop, ctrl-s: start, ctrl-r: restart
space: refresh, ctrl-/: inspect, alt-r: remove, ctrl-l: logs, alt-j: arthas, alt-l: lnav, alt-u: prune
alt-i: Images, alt-x: Context, alt-h: Home"

choice=$(docker ps $docker_ps_opts $docker_ps_opts | tail -n +2 | fzf --expect="$fzf_expect" --header="$fzf_header" --multi)

if [ -z "$choice" ]; then
  exit 0
fi

choices=("${(f)choice}")

expect=$choices[1]
selection=$choices[2]
selections=($choices[2,-1])

if [[ "$expect" = "alt-x" ]]; then
  exec fdkx
elif [[ "$expect" = "alt-h" ]]; then
  exec fdk
elif [[ "$expect" = "alt-i" ]]; then
  exec fdki
elif [[ -n "$selection" ]]; then
  container_id=$(echo $selection | awk '{print $1}')
  container_ids=($(echo ${(F)selections} | awk '{print $1}'))
  if [[ "$expect" = "ctrl-e" || "$expect" = "enter" ]]; then
    if [[ $#selections -gt 1 ]]; then
      error "Only one container can be selected for exec"
    else
      docker exec -it $container_id /bin/bash
    fi
    fdkc $show_all
  elif [[ "$expect" = "ctrl-k" ]]; then
    run_command "docker kill ${container_ids}"
    fdkc $show_all
  elif [[ "$expect" = "ctrl-o" ]]; then
    run_command "docker stop ${container_ids}"
    fdkc $show_all
  elif [[ "$expect" = "ctrl-s" ]]; then
    run_command "docker start ${container_ids}"
    fdkc $show_all
  elif [[ "$expect" = "ctrl-r" ]]; then
    run_command "docker restart ${container_ids}"
    fdkc $show_all
  elif [[ "$expect" = "ctrl-/" ]]; then
    if [[ $#selections -gt 1 ]]; then
      error "Only one container can be selected for inspect"
    else
      docker inspect $container_id | bat -l json
    fi
    fdkc $show_all
  elif [[ "$expect" = "alt-r" ]]; then
    run_command "docker rm ${container_ids}"
    fdkc $show_all
  elif [[ "$expect" = "ctrl-l" ]]; then
    if [[ $#selections -gt 1 ]]; then
      error "Only one container can be selected for logs"
    else
      docker logs -f $container_id
    fi
    fdkc $show_all
  elif [[ "$expect" = "alt-u" ]]; then
    run_command "docker container prune"
    fdkc $show_all
  elif [[ "$expect" = "alt-j" ]]; then
    if [[ $#selections -gt 1 ]]; then
      error "Only one container can be selected for arthas"
    else
      docker exec -it $container_id /usr/local/bin/as.sh 1
    fi
    fdkc $show_all
  elif [[ "$expect" = "alt-l" ]]; then
    if [[ $#selections -gt 1 ]]; then
      error "Only one container can be selected for lnav"
    else
      docker exec -it $container_id bash -c '/usr/local/bin/lnav $(find /data/logs -type f -name "*.log" -print0 | xargs -0 ls -t | head -n 1)'
    fi
    fdkc $show_all
  fi
fi

if [[ "$expect" = "ctrl-a" ]]; then
  exec fdkc $fdkc_args
elif [[ "$expect" = "space" ]]; then
  exec fdkc $show_all
fi
