#!/bin/zsh

function error() {
  echo "Error: $1"
  echo "Press any key to continue..."
  read -n 1
}

function fatal() {
  echo "Error: $1"
  exit 1
}

function red() {
  echo -e "\033[1;31m$1\033[0m"
}

function green() {
  echo -e "\033[1;32m$1\033[0m"
}

function yellow() {
  echo -e "\033[1;33m$1\033[0m"
}

function run_command() {
  local command=$1
  echo "Running: $command"
  echo "Press enter to run the command"
  read -k 1 answer
  if [ "$answer" = $'\n' ]; then
    eval $command
    echo "Press any key to continue..."
    read -n 1
  fi
}

function check_bins() {
  check_docker
  check_fzf
}

function check_docker() {
  if ! command -v docker &> /dev/null; then
    fatal "docker could not be found"
  fi
}

function check_fzf() {
  if ! command -v fzf &> /dev/null; then
    fatal "fzf could not be found"
  fi

  local fzf_version=$(fzf --version)
  local major_version=$(echo $fzf_version | cut -d'.' -f1)
  local minor_version=$(echo $fzf_version | cut -d'.' -f2)
  if [ $major_version = 0 ] && [ $minor_version -lt 53 ]; then
    fatal "fzf version must be at least 0.53.0"
  fi
}

function fdk_placeholder_widget() {
  LBUFFER=$FDK_PLACEHOLDER
}
zle -N fdk_placeholder_widget

function run_interactivelly() {
  local prompt=$1
  FDK_PLACEHOLDER=$2
  run_interactivelly_result=''
  vared -i fdk_placeholder_widget -p "$prompt " -c run_interactivelly_result
  if [ -n "$run_interactivelly_result" ]; then
    eval "$prompt ${run_interactivelly_result}"
  fi
}


check_bins

show_all=$1

if [ "$show_all" = "true" ]; then
  show_all_label=$(green "true")
  docker_images_opts="-a"
  fdki_args=false
else
  show_all_label=$(red "false")
  docker_images_opts=""
  fdki_args=true
fi


current_context=$(docker context show)
fzf_expect="enter,ctrl-r,ctrl-s,ctrl-x,ctrl-a,ctrl-t,space,ctrl-/,alt-r,alt-p,alt-c,alt-x,alt-h,alt-u"
fzf_header=$'\n'"Current Docker context: $(green $current_context), Show all: $show_all_label"$'\n'\
$'ctrl-r: run default,\tctrl-s: detach run,\tenter/ctrl-x: custom run,\tctrl-a: toggle all,\tctrl-t: tag\n'\
$'space: refresh,\t\tctrl-/: inspect,\talt-r: remove,\t\t\talt-p: push,\t\talt-u: prune\n'\
$(yellow $'alt-c: Containers,\talt-x: Context,\t\talt-h: Home\n')

choice=$(docker images $docker_images_opts | tail -n +2 | fzf --expect="$fzf_expect" --header="$fzf_header" --header-first)

if [ -z "$choice" ]; then
  exit 0
fi

choices=("${(f)choice}")
expect=$choices[1]
selection=$choices[2]
selections=($choices[2,-1])

if [[ "$expect" = "alt-x" ]]; then
  exec fdkx
elif [[ "$expect" = "alt-c" ]]; then
  exec fdkc
elif [[ "$expect" = "alt-h" ]]; then
  exec fdk
elif [[ -n "$selection" ]]; then
  repository=$(echo $selection | awk '{print $1}')
  tag=$(echo $selection | awk '{print $2}')
  image_id=$(echo $selection | awk '{print $3}')
  image_name="$repository:$tag"
  if [[ "$repository" = "<none>" || "$tag" = "<none>" ]]; then
    image_name=$image_id
  fi
  image_ids=($(echo ${(F)selections} | awk '{print $3}'))
  image_names=($(echo ${(F)selections} | awk '{if ($1 != "<none>" && $2 != "<none>") print $1":"$2; else print $3}'))
  if [[ "$expect" = "ctrl-r" ]]; then
    if [[ $#selections -gt 1 ]]; then
      error "Only one image can be selected for run"
    else
      run_command "docker run --rm -it $image_name"
    fi
    exec fdki $show_all
  elif [[ "$expect" = "ctrl-s" ]]; then
    if [[ $#selections -gt 1 ]]; then
      error "Only one image can be selected for run"
    else
      run_command "docker run -d $image_name"
    fi
    exec fdki $show_all
  elif [[ "$expect" = "ctrl-x" || "$expect" = "enter" ]]; then
    if [[ $#selections -gt 1 ]]; then
      error "Only one image can be selected for run"
    else
      run_interactivelly "docker run" "--rm -it $image_name"
    fi
    exec fdki $show_all
  elif [[ "$expect" = "ctrl-t" ]]; then
    if [[ $#selections -gt 1 ]]; then
      error "Only one image can be selected for tag"
    else
      run_interactivelly "docker tag $image_name" "$repository:$tag"
    fi
    exec fdki $show_all
  elif [[ "$expect" = "ctrl-/" ]]; then
    if [[ $#selections -gt 1 ]]; then
      error "Only one image can be selected for inspect"
    else
      run_command "docker image inspect $image_name"
    fi
    exec fdki $show_all
  elif [[ "$expect" = "alt-r" ]]; then
    run_command "docker image rm $image_names"
    exec fdki $show_all
  elif [[ "$expect" = "alt-p" ]]; then
    run_command "docker image push $image_names"
    exec fdki $show_all
  fi
fi

if [[ "$expect" = "ctrl-a" ]]; then
  exec fdki $fdki_args
elif [[ "$expect" = "space" ]]; then
  exec fdki $show_all
elif [[ "$expect" = "alt-u" ]]; then
  run_command "docker image prune"
  exec fdki $show_all
else
  exec fdki $show_all
fi
