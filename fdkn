#!/bin/zsh

function error() {
  echo "Error: $1"
  echo "Press any key to continue..."
  read -n 1
}

function fatal() {
  echo "Error: $1"
  exit 1
}

function red() {
  echo -e "\033[1;31m$1\033[0m"
}

function green() {
  echo -e "\033[1;32m$1\033[0m"
}

function yellow() {
  echo -e "\033[1;33m$1\033[0m"
}

function run_command() {
  local command=$1
  echo "Running: $command"
  echo "Press enter to run the command"
  read -k 1 answer
  if [ "$answer" = $'\n' ]; then
    eval $command
    echo "Press any key to continue..."
    read -n 1
  fi
}

function check_bins() {
  check_docker
  check_fzf
}

function check_docker() {
  if ! command -v docker &> /dev/null; then
    fatal "docker could not be found"
  fi
}

function check_fzf() {
  if ! command -v fzf &> /dev/null; then
    fatal "fzf could not be found"
  fi

  local fzf_version=$(fzf --version)
  local major_version=$(echo $fzf_version | cut -d'.' -f1)
  local minor_version=$(echo $fzf_version | cut -d'.' -f2)
  if [ $major_version = 0 ] && [ $minor_version -lt 53 ]; then
    fatal "fzf version must be at least 0.53.0"
  fi
}

check_bins

show_all=$1

if [ "$show_all" = "true" ]; then
  show_all_label=$(green "true")
  # For networks, we always show all since there's no running/stopped state
  fdkn_args=false
else
  show_all_label=$(red "false")
  fdkn_args=true
fi

current_context=$(docker context show)
fzf_expect="enter,ctrl-e,ctrl-a,space,ctrl-/,alt-r,ctrl-x,alt-i,alt-h,alt-u,alt-c,alt-l,alt-d,alt-s"
fzf_header=$'\nCurrent Docker context: '"$(green $current_context),"$'\t'"Show all: $show_all_label"$'\n'\
$'enter/ctrl-e: inspect,\tctrl-a: toggle all,\tctrl-/: inspect json,\tspace: refresh,\talt-r: remove,\tctrl-x: force remove\n'\
$'alt-u: prune,\t\talt-c: create,\t\talt-l: list containers,\talt-d: disconnect,\talt-s: connect,\talt-i: Images,\talt-h: Home'

choice=$(docker network ls | tail -n +2 | fzf --expect="$fzf_expect" --header="$fzf_header" --header-first --multi)

if [ -z "$choice" ]; then
  exit 0
fi

choices=("${(f)choice}")

expect=$choices[1]
selection=$choices[2]
selections=($choices[2,-1])

if [[ "$expect" = "alt-h" ]]; then
  exec fdk
elif [[ "$expect" = "alt-i" ]]; then
  exec fdki
elif [[ "$expect" = "alt-c" ]]; then
  echo "Enter network name:"
  read network_name
  if [[ -n "$network_name" ]]; then
    echo "Enter driver (default: bridge):"
    read driver
    if [[ -z "$driver" ]]; then
      driver="bridge"
    fi
    run_command "docker network create --driver $driver $network_name"
  fi
  exec fdkn $show_all
elif [[ -n "$selection" ]]; then
  network_id=$(echo $selection | awk '{print $1}')
  network_name=$(echo $selection | awk '{print $2}')
  network_ids=($(echo ${(F)selections} | awk '{print $1}'))
  network_names=($(echo ${(F)selections} | awk '{print $2}'))
  
  if [[ "$expect" = "ctrl-e" || "$expect" = "enter" ]]; then
    if [[ $#selections -gt 1 ]]; then
      error "Only one network can be selected for inspect"
    else
      docker network inspect $network_name | nvim -R -
    fi
    exec fdkn $show_all
  elif [[ "$expect" = "ctrl-/" ]]; then
    if [[ $#selections -gt 1 ]]; then
      error "Only one network can be selected for inspect"
    else
      docker network inspect $network_name | jq . | nvim -R -
    fi
    exec fdkn $show_all
  elif [[ "$expect" = "alt-r" ]]; then
    # Check if trying to remove system networks
    for net_name in $network_names; do
      if [[ "$net_name" = "bridge" || "$net_name" = "host" || "$net_name" = "none" ]]; then
        error "Cannot remove system network: $net_name"
        exec fdkn $show_all
      fi
    done
    run_command "docker network rm ${network_names}"
    exec fdkn $show_all
  elif [[ "$expect" = "ctrl-x" ]]; then
    # Check if trying to remove system networks
    for net_name in $network_names; do
      if [[ "$net_name" = "bridge" || "$net_name" = "host" || "$net_name" = "none" ]]; then
        error "Cannot remove system network: $net_name"
        exec fdkn $show_all
      fi
    done
    run_command "docker network rm --force ${network_names}"
    exec fdkn $show_all
  elif [[ "$expect" = "alt-l" ]]; then
    if [[ $#selections -gt 1 ]]; then
      error "Only one network can be selected for listing containers"
    else
      echo "Containers connected to network '$network_name':"
      docker network inspect $network_name | jq -r '.[0].Containers | to_entries[] | "\(.key[0:12]) \(.value.Name)"' 2>/dev/null || echo "No containers found or network not found"
      echo "Press any key to continue..."
      read -n 1
    fi
    exec fdkn $show_all
  elif [[ "$expect" = "alt-s" ]]; then
    if [[ $#selections -gt 1 ]]; then
      error "Only one network can be selected for connecting containers"
    else
      echo "Available containers:"
      docker ps --format "table {{.ID}}\t{{.Names}}\t{{.Status}}"
      echo "Enter container name or ID to connect:"
      read container_name
      if [[ -n "$container_name" ]]; then
        run_command "docker network connect $network_name $container_name"
      fi
    fi
    exec fdkn $show_all
  elif [[ "$expect" = "alt-d" ]]; then
    if [[ $#selections -gt 1 ]]; then
      error "Only one network can be selected for disconnecting containers"
    else
      echo "Containers connected to network '$network_name':"
      connected_containers=$(docker network inspect $network_name | jq -r '.[0].Containers | to_entries[] | "\(.key[0:12]) \(.value.Name)"' 2>/dev/null)
      if [[ -n "$connected_containers" ]]; then
        echo "$connected_containers"
        echo "Enter container name or ID to disconnect:"
        read container_name
        if [[ -n "$container_name" ]]; then
          run_command "docker network disconnect $network_name $container_name"
        fi
      else
        echo "No containers connected to this network"
        echo "Press any key to continue..."
        read -n 1
      fi
    fi
    exec fdkn $show_all
  fi
fi

if [[ "$expect" = "ctrl-a" ]]; then
  exec fdkn $fdkn_args
elif [[ "$expect" = "space" ]]; then
  exec fdkn $show_all
elif [[ "$expect" = "alt-u" ]]; then
  run_command "docker network prune"
  exec fdkn $show_all
else
  exec fdkn $show_all
fi 