#!/bin/bash

set -euo pipefail

# json_merge - 递归合并多个JSON文件
# 使用方法: json_merge [OPTIONS] file1.json file2.json ...
# 选项:
#   -o FILE    指定输出文件(默认输出到标准输出)
#   -h         显示帮助信息

usage() {
    cat << EOF
json_merge - 递归合并多个JSON文件

使用方法:
    json_merge [OPTIONS] file1.json file2.json ...

参数:
    file1.json file2.json ...    要合并的JSON文件，右侧文件会覆盖左侧文件

选项:
    -o FILE    指定输出文件(默认输出到标准输出)
    -h         显示帮助信息

示例:
    json_merge config1.json config2.json
    json_merge -o merged.json base.json override.json
EOF
}

# 检查jq命令是否可用
if ! command -v jq >/dev/null 2>&1; then
    echo "错误: 需要安装jq命令" >&2
    echo "Ubuntu/Debian: sudo apt-get install jq" >&2
    echo "macOS: brew install jq" >&2
    echo "CentOS/RHEL: sudo yum install jq" >&2
    exit 1
fi

# 解析命令行参数
output_file=""
input_files=()

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            usage
            exit 0
            ;;
        -o)
            if [[ $# -lt 2 ]]; then
                echo "错误: -o 选项需要指定输出文件" >&2
                exit 1
            fi
            output_file="$2"
            shift 2
            ;;
        -*)
            echo "错误: 未知选项 '$1'" >&2
            echo "使用 -h 查看帮助信息" >&2
            exit 1
            ;;
        *)
            input_files+=("$1")
            shift
            ;;
    esac
done

# 检查是否有输入文件
if [[ ${#input_files[@]} -eq 0 ]]; then
    echo "错误: 至少需要指定一个输入文件" >&2
    echo "使用 -h 查看帮助信息" >&2
    exit 1
fi

# 检查所有输入文件是否存在且可读
for file in "${input_files[@]}"; do
    if [[ ! -f "$file" ]]; then
        echo "错误: 文件 '$file' 不存在" >&2
        exit 1
    fi
    if [[ ! -r "$file" ]]; then
        echo "错误: 文件 '$file' 不可读" >&2
        exit 1
    fi
done

# 递归合并JSON的函数
merge_json() {
    local files=("$@")
    local temp_files=()

    # 创建临时目录
    local temp_dir=$(mktemp -d)
    trap "rm -rf '$temp_dir'" EXIT

    # 检查每个文件是否为有效JSON
    for i in "${!files[@]}"; do
        local file="${files[$i]}"
        local temp_file="$temp_dir/file_$i.json"

        if ! jq empty "$file" 2>/dev/null; then
            echo "错误: 文件 '$file' 不是有效的JSON格式" >&2
            exit 1
        fi

        # 规范化JSON格式
        jq . "$file" > "$temp_file"
        temp_files+=("$temp_file")
    done

    # 如果没有文件，输出空对象
    if [[ ${#temp_files[@]} -eq 0 ]]; then
        echo "{}"
        return
    fi

    # 如果只有一个文件，直接输出
    if [[ ${#temp_files[@]} -eq 1 ]]; then
        cat "${temp_files[0]}"
        return
    fi

    # 递归合并多个文件
    local result="${temp_files[0]}"
    for ((i=1; i<${#temp_files[@]}; i++)); do
        local next_file="${temp_files[$i]}"

        # 使用jq的递归合并功能
        # 右侧文件(next_file)的值会覆盖左侧文件(result)的值
        local merged_file="$temp_dir/merged_$i.json"
        jq -s 'add' "$result" "$next_file" > "$merged_file" 2>/dev/null || {
            # 如果简单合并失败，使用深度合并
            jq -s 'def deep_merge($other):
                . as $in |
                reduce ($other | keys_unsorted[]) as $key (
                    .;
                    if $in[$key] and ($other[$key] | type) == "object" and ($in[$key] | type) == "object"
                    then .[$key] |= deep_merge($other[$key])
                    else .[$key] = $other[$key]
                    end
                );
                reduce .[] as $item ({}; deep_merge($item))' \
                "$result" "$next_file" > "$merged_file" 2>/dev/null || {
                echo "错误: 合并JSON文件失败" >&2
                exit 1
            }
        }

        result="$merged_file"
    done

    # 输出最终结果
    cat "$result"
}

# 执行合并
result=$(merge_json "${input_files[@]}")

# 输出结果
if [[ -n "$output_file" ]]; then
    echo "$result" > "$output_file"
    echo "JSON文件合并完成，结果已保存到: $output_file" >&2
else
    echo "$result"
fi
