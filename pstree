#!/bin/bash

# 用法: pstree <PID>
# 兼容 macOS 和 Linux

set -e

if [ -z "$1" ]; then
  echo "用法: $0 <PID>"
  exit 1
fi

TARGET_PID="$1"

# 检查 PID 是否存在
if ! ps -p "$TARGET_PID" >/dev/null 2>&1; then
  echo "pstree: 进程号 $TARGET_PID 不存在"
  exit 1
fi

# 检查 ps 兼容性
if ps -p $$ -o ppid= >/dev/null 2>&1; then
  PS_CMD="ps"
else
  echo "不支持的 ps 版本"
  exit 1
fi

# 获取进程信息: PID, PPID, CMD
get_proc_info() {
  # $1: PID
  $PS_CMD -p "$1" -o pid= -o ppid= -o args= | awk '{pid=$1; ppid=$2; $1=""; $2=""; sub(/^  */, ""); printf "%s • %s • %s", pid, ppid, $0}'
}

# 获取所有子进程
get_children() {
  local ppid="$1"
  if [[ "$(uname)" == "Darwin" ]]; then
    $PS_CMD -eo pid=,ppid= | awk -v ppid="$ppid" '$2==ppid {print $1}'
  else
    $PS_CMD --no-headers -eo pid=,ppid= | awk -v ppid="$ppid" '$2==ppid {print $1}'
  fi
}

# 递归打印树
print_tree() {
  local pid="$1"
  local prefix="$2"
  
  local children=( $(get_children "$pid") )
  local count=${#children[@]}
  local i=0

  for child in "${children[@]}"; do
    i=$((i+1))
    local child_info
    child_info=$(get_proc_info "$child")

    local branch="├── "
    local next_prefix="│   "

    if [ "$i" -eq "$count" ]; then
      branch="└── "
      next_prefix="    "
    fi

    echo -n "$prefix$branch"
    if [ "$child" = "$TARGET_PID" ]; then
      echo -e "\033[1;31m$child_info\033[0m"
    else
      echo "$child_info"
    fi
    
    print_tree "$child" "$prefix$next_prefix"
  done
}

# 获取祖先链
get_ancestors() {
  local pid="$1"
  local ancestors=()
  while [ "$pid" != "0" ] && [ -n "$pid" ] && [ "$pid" != "1" ]; do
      local ppid
      ppid=$($PS_CMD -p "$pid" -o ppid= | tr -d ' ')
      if [ -z "$ppid" ]; then break; fi
      ancestors=("$pid" "${ancestors[@]}")
      pid=$ppid
  done
  ancestors=("1" "${ancestors[@]}")
  echo "${ancestors[@]}"
}

# 主流程
ancestors=( $(get_ancestors "$TARGET_PID") )

# 打印祖先链
prefix=""
for ((i=0; i<${#ancestors[@]}; i++)); do
  pid="${ancestors[$i]}"
  info=$(get_proc_info "$pid")
  
  if [ "$i" -eq 0 ]; then
    if [ "$pid" = "$TARGET_PID" ]; then
      echo -e "\033[1;31m$info\033[0m"
    else
      echo "$info"
    fi
  else
    echo -n "${prefix}└── "
    if [ "$pid" = "$TARGET_PID" ]; then
      echo -e "\033[1;31m$info\033[0m"
    else
      echo "$info"
    fi
    prefix+="    "
  fi
done

# 从目标 PID 开始打印后代
print_tree "$TARGET_PID" "$prefix"

